package com.rental.car.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rental.car.model.Car;
import com.rental.car.model.CarModel;
import com.rental.car.model.CarSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Car service. Represents a row in the &quot;RC_Car&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rental.car.model.CarModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CarImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CarImpl
 * @see com.rental.car.model.Car
 * @see com.rental.car.model.CarModel
 * @generated
 */
@JSON(strict = true)
public class CarModelImpl extends BaseModelImpl<Car> implements CarModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a car model instance should use the {@link com.rental.car.model.Car} interface instead.
     */
    public static final String TABLE_NAME = "RC_Car";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "carId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "status", Types.INTEGER },
            { "statusByUserId", Types.BIGINT },
            { "statusByUserName", Types.VARCHAR },
            { "statusDate", Types.TIMESTAMP },
            { "brand", Types.VARCHAR },
            { "model", Types.VARCHAR },
            { "manufacturingYear", Types.TIMESTAMP },
            { "fuelType", Types.VARCHAR },
            { "passengers", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table RC_Car (uuid_ VARCHAR(75) null,carId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,brand VARCHAR(75) null,model VARCHAR(75) null,manufacturingYear DATE null,fuelType VARCHAR(75) null,passengers INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table RC_Car";
    public static final String ORDER_BY_JPQL = " ORDER BY car.brand ASC, car.model ASC";
    public static final String ORDER_BY_SQL = " ORDER BY RC_Car.brand ASC, RC_Car.model ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.rental.car.model.Car"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.rental.car.model.Car"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.rental.car.model.Car"),
            true);
    public static long BRAND_COLUMN_BITMASK = 1L;
    public static long COMPANYID_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static long MODEL_COLUMN_BITMASK = 8L;
    public static long UUID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.rental.car.model.Car"));
    private static ClassLoader _classLoader = Car.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Car.class };
    private String _uuid;
    private String _originalUuid;
    private long _carId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private int _status;
    private long _statusByUserId;
    private String _statusByUserUuid;
    private String _statusByUserName;
    private Date _statusDate;
    private String _brand;
    private String _originalBrand;
    private String _model;
    private String _originalModel;
    private Date _manufacturingYear;
    private String _fuelType;
    private int _passengers;
    private long _columnBitmask;
    private Car _escapedModel;

    public CarModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Car toModel(CarSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Car model = new CarImpl();

        model.setUuid(soapModel.getUuid());
        model.setCarId(soapModel.getCarId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setStatus(soapModel.getStatus());
        model.setStatusByUserId(soapModel.getStatusByUserId());
        model.setStatusByUserName(soapModel.getStatusByUserName());
        model.setStatusDate(soapModel.getStatusDate());
        model.setBrand(soapModel.getBrand());
        model.setModel(soapModel.getModel());
        model.setManufacturingYear(soapModel.getManufacturingYear());
        model.setFuelType(soapModel.getFuelType());
        model.setPassengers(soapModel.getPassengers());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Car> toModels(CarSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Car> models = new ArrayList<Car>(soapModels.length);

        for (CarSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _carId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCarId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _carId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Car.class;
    }

    @Override
    public String getModelClassName() {
        return Car.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("carId", getCarId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("status", getStatus());
        attributes.put("statusByUserId", getStatusByUserId());
        attributes.put("statusByUserName", getStatusByUserName());
        attributes.put("statusDate", getStatusDate());
        attributes.put("brand", getBrand());
        attributes.put("model", getModel());
        attributes.put("manufacturingYear", getManufacturingYear());
        attributes.put("fuelType", getFuelType());
        attributes.put("passengers", getPassengers());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long carId = (Long) attributes.get("carId");

        if (carId != null) {
            setCarId(carId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long statusByUserId = (Long) attributes.get("statusByUserId");

        if (statusByUserId != null) {
            setStatusByUserId(statusByUserId);
        }

        String statusByUserName = (String) attributes.get("statusByUserName");

        if (statusByUserName != null) {
            setStatusByUserName(statusByUserName);
        }

        Date statusDate = (Date) attributes.get("statusDate");

        if (statusDate != null) {
            setStatusDate(statusDate);
        }

        String brand = (String) attributes.get("brand");

        if (brand != null) {
            setBrand(brand);
        }

        String model = (String) attributes.get("model");

        if (model != null) {
            setModel(model);
        }

        Date manufacturingYear = (Date) attributes.get("manufacturingYear");

        if (manufacturingYear != null) {
            setManufacturingYear(manufacturingYear);
        }

        String fuelType = (String) attributes.get("fuelType");

        if (fuelType != null) {
            setFuelType(fuelType);
        }

        Integer passengers = (Integer) attributes.get("passengers");

        if (passengers != null) {
            setPassengers(passengers);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getCarId() {
        return _carId;
    }

    @Override
    public void setCarId(long carId) {
        _carId = carId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @JSON
    @Override
    public long getStatusByUserId() {
        return _statusByUserId;
    }

    @Override
    public void setStatusByUserId(long statusByUserId) {
        _statusByUserId = statusByUserId;
    }

    @Override
    public String getStatusByUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
            _statusByUserUuid);
    }

    @Override
    public void setStatusByUserUuid(String statusByUserUuid) {
        _statusByUserUuid = statusByUserUuid;
    }

    @JSON
    @Override
    public String getStatusByUserName() {
        if (_statusByUserName == null) {
            return StringPool.BLANK;
        } else {
            return _statusByUserName;
        }
    }

    @Override
    public void setStatusByUserName(String statusByUserName) {
        _statusByUserName = statusByUserName;
    }

    @JSON
    @Override
    public Date getStatusDate() {
        return _statusDate;
    }

    @Override
    public void setStatusDate(Date statusDate) {
        _statusDate = statusDate;
    }

    @JSON
    @Override
    public String getBrand() {
        if (_brand == null) {
            return StringPool.BLANK;
        } else {
            return _brand;
        }
    }

    @Override
    public void setBrand(String brand) {
        _columnBitmask = -1L;

        if (_originalBrand == null) {
            _originalBrand = _brand;
        }

        _brand = brand;
    }

    public String getOriginalBrand() {
        return GetterUtil.getString(_originalBrand);
    }

    @JSON
    @Override
    public String getModel() {
        if (_model == null) {
            return StringPool.BLANK;
        } else {
            return _model;
        }
    }

    @Override
    public void setModel(String model) {
        _columnBitmask = -1L;

        if (_originalModel == null) {
            _originalModel = _model;
        }

        _model = model;
    }

    public String getOriginalModel() {
        return GetterUtil.getString(_originalModel);
    }

    @JSON
    @Override
    public Date getManufacturingYear() {
        return _manufacturingYear;
    }

    @Override
    public void setManufacturingYear(Date manufacturingYear) {
        _manufacturingYear = manufacturingYear;
    }

    @JSON
    @Override
    public String getFuelType() {
        if (_fuelType == null) {
            return StringPool.BLANK;
        } else {
            return _fuelType;
        }
    }

    @Override
    public void setFuelType(String fuelType) {
        _fuelType = fuelType;
    }

    @JSON
    @Override
    public int getPassengers() {
        return _passengers;
    }

    @Override
    public void setPassengers(int passengers) {
        _passengers = passengers;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                Car.class.getName()));
    }

    /**
     * @deprecated As of 6.1.0, replaced by {@link #isApproved}
     */
    @Override
    public boolean getApproved() {
        return isApproved();
    }

    @Override
    public boolean isApproved() {
        if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDenied() {
        if (getStatus() == WorkflowConstants.STATUS_DENIED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDraft() {
        if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isExpired() {
        if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInactive() {
        if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isIncomplete() {
        if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isPending() {
        if (getStatus() == WorkflowConstants.STATUS_PENDING) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isScheduled() {
        if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
            return true;
        } else {
            return false;
        }
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Car.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Car toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Car) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CarImpl carImpl = new CarImpl();

        carImpl.setUuid(getUuid());
        carImpl.setCarId(getCarId());
        carImpl.setGroupId(getGroupId());
        carImpl.setCompanyId(getCompanyId());
        carImpl.setUserId(getUserId());
        carImpl.setUserName(getUserName());
        carImpl.setCreateDate(getCreateDate());
        carImpl.setModifiedDate(getModifiedDate());
        carImpl.setStatus(getStatus());
        carImpl.setStatusByUserId(getStatusByUserId());
        carImpl.setStatusByUserName(getStatusByUserName());
        carImpl.setStatusDate(getStatusDate());
        carImpl.setBrand(getBrand());
        carImpl.setModel(getModel());
        carImpl.setManufacturingYear(getManufacturingYear());
        carImpl.setFuelType(getFuelType());
        carImpl.setPassengers(getPassengers());

        carImpl.resetOriginalValues();

        return carImpl;
    }

    @Override
    public int compareTo(Car car) {
        int value = 0;

        value = getBrand().compareTo(car.getBrand());

        if (value != 0) {
            return value;
        }

        value = getModel().compareTo(car.getModel());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Car)) {
            return false;
        }

        Car car = (Car) obj;

        long primaryKey = car.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CarModelImpl carModelImpl = this;

        carModelImpl._originalUuid = carModelImpl._uuid;

        carModelImpl._originalGroupId = carModelImpl._groupId;

        carModelImpl._setOriginalGroupId = false;

        carModelImpl._originalCompanyId = carModelImpl._companyId;

        carModelImpl._setOriginalCompanyId = false;

        carModelImpl._originalBrand = carModelImpl._brand;

        carModelImpl._originalModel = carModelImpl._model;

        carModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Car> toCacheModel() {
        CarCacheModel carCacheModel = new CarCacheModel();

        carCacheModel.uuid = getUuid();

        String uuid = carCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            carCacheModel.uuid = null;
        }

        carCacheModel.carId = getCarId();

        carCacheModel.groupId = getGroupId();

        carCacheModel.companyId = getCompanyId();

        carCacheModel.userId = getUserId();

        carCacheModel.userName = getUserName();

        String userName = carCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            carCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            carCacheModel.createDate = createDate.getTime();
        } else {
            carCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            carCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            carCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        carCacheModel.status = getStatus();

        carCacheModel.statusByUserId = getStatusByUserId();

        carCacheModel.statusByUserName = getStatusByUserName();

        String statusByUserName = carCacheModel.statusByUserName;

        if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
            carCacheModel.statusByUserName = null;
        }

        Date statusDate = getStatusDate();

        if (statusDate != null) {
            carCacheModel.statusDate = statusDate.getTime();
        } else {
            carCacheModel.statusDate = Long.MIN_VALUE;
        }

        carCacheModel.brand = getBrand();

        String brand = carCacheModel.brand;

        if ((brand != null) && (brand.length() == 0)) {
            carCacheModel.brand = null;
        }

        carCacheModel.model = getModel();

        String model = carCacheModel.model;

        if ((model != null) && (model.length() == 0)) {
            carCacheModel.model = null;
        }

        Date manufacturingYear = getManufacturingYear();

        if (manufacturingYear != null) {
            carCacheModel.manufacturingYear = manufacturingYear.getTime();
        } else {
            carCacheModel.manufacturingYear = Long.MIN_VALUE;
        }

        carCacheModel.fuelType = getFuelType();

        String fuelType = carCacheModel.fuelType;

        if ((fuelType != null) && (fuelType.length() == 0)) {
            carCacheModel.fuelType = null;
        }

        carCacheModel.passengers = getPassengers();

        return carCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(35);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", carId=");
        sb.append(getCarId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", statusByUserId=");
        sb.append(getStatusByUserId());
        sb.append(", statusByUserName=");
        sb.append(getStatusByUserName());
        sb.append(", statusDate=");
        sb.append(getStatusDate());
        sb.append(", brand=");
        sb.append(getBrand());
        sb.append(", model=");
        sb.append(getModel());
        sb.append(", manufacturingYear=");
        sb.append(getManufacturingYear());
        sb.append(", fuelType=");
        sb.append(getFuelType());
        sb.append(", passengers=");
        sb.append(getPassengers());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(55);

        sb.append("<model><model-name>");
        sb.append("com.rental.car.model.Car");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>carId</column-name><column-value><![CDATA[");
        sb.append(getCarId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusDate</column-name><column-value><![CDATA[");
        sb.append(getStatusDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brand</column-name><column-value><![CDATA[");
        sb.append(getBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>model</column-name><column-value><![CDATA[");
        sb.append(getModel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>manufacturingYear</column-name><column-value><![CDATA[");
        sb.append(getManufacturingYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fuelType</column-name><column-value><![CDATA[");
        sb.append(getFuelType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>passengers</column-name><column-value><![CDATA[");
        sb.append(getPassengers());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
